#!/usr/bin/env python

from __future__ import print_function

import argparse
import os
import pandas as pd


def collectArgs():
    descr = 'Collect / Aggregate Feature Files'
    parser = argparse.ArgumentParser(
        description=descr,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument("-i", "--input-files", dest="files", nargs="+",
                        required=True,
                        help="tab separated text files where column 1 contains \
                        the gene id and column 2 contains raw or normalized \
                        read counts")
    parser.add_argument("-I", "--input-file-ids", dest="file_ids", nargs="+",
                        required=False,
                        help="IDs to use as column names in merged matrix")
    parser.add_argument("-o", "--output-file", dest="output_file",
                        required=True,
                        help="tab separated values will be written to this \
                        file")
    return parser


def collectFeatures(files, ids):
    for f, i in zip(files, ids):
        file_basename = i if i else os.path.basename(f)
        features = pd.read_csv(f, sep="\t", index_col=0)
        features.columns = [file_basename]
        try:
            featureMatrix = featureMatrix.join(features, how="inner")
        except NameError:
            featureMatrix = features

    return featureMatrix


if __name__ == '__main__':

    parser = collectArgs()
    args = parser.parse_args()
    
    if args.file_ids is not None:
        if len(args.file_ids) != len(args.files):
            print("The number of input files must be the same as the number of \
            IDs supplied.")
            exit(1)

    featureMatrix = collectFeatures(args.files, args.file_ids)

    featureMatrix.to_csv(args.output_file, sep="\t", header=True, index=True,
                         index_label="gene_id")
